y = "Total Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarise Trip.Total by Company and arrange by TotalRevenue in descending order
trip_total_by_Company <- cleaned_taxi_df %>%
group_by(Company) %>%
summarise(TotalRevenue = sum(Trip.Total), .groups = 'drop') %>%
arrange(desc(TotalRevenue))
# Display the full table sorted by Total Revenue
kable(trip_total_by_Company)
# Summarise Trip.Total by Company and arrange by TotalRevenue in descending order
trip_total_by_time <- cleaned_taxi_df %>%
group_by(Trip.Hour.Of.The.Day) %>%
summarise(TotalRevenue = sum(Trip.Total), .groups = 'drop') %>%
arrange(desc(TotalRevenue))
ggplot(trip_total_by_time, aes(x = Trip.Hour.Of.The.Day, y = TotalRevenue, fill = TotalRevenue)) +
geom_col() +
labs(title = "Trips total by time in a day",
x = "Time",
y = "Trips total") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + # This line removes the legend
scale_fill_gradient(low = "lightblue", high = "blue") # This line adds a color gradient from light blue to blue
# Summarise Trip id by Payment Type
trip_count_by_PaymentType <- cleaned_taxi_df %>%
group_by(Payment.Type) %>%
summarise(TripCount = n_distinct(Trip.ID))
# Create a bar plot of Trip Total by Payment Type
ggplot(trip_count_by_PaymentType, aes(x = Payment.Type, y = TripCount, fill = Payment.Type)) +
geom_col() +  # This creates a bar chart with pre-summarized data
labs(title = "Trips Count by Paymeny type",
x = "Payment Type",
y = "Trip Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
trip_count_by_DayoftheWeek <- cleaned_taxi_df %>%
group_by(Trip.Day.Of.The.Week) %>%
summarise(TripCount = n_distinct(Trip.ID))
# Define a named vector to map day numbers to day names
day_names <- c("1" = "Sunday", "2" = "Monday", "3" = "Tuesday", "4" = "Wednesday",
"5" = "Thursday", "6" = "Friday", "7" = "Saturday")
# Create the bar plot, using the named vector for axis labels
ggplot(trip_count_by_DayoftheWeek, aes(x = Trip.Day.Of.The.Week, y = TripCount, fill = Trip.Day.Of.The.Week)) +
geom_col() +
scale_x_discrete(labels = day_names) +  # Use the day_names vector for axis labels
labs(title = "Trip Count by Day of the Week",
x = " ",
y = "Trip Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarise Trip.Total by Company and arrange by TotalRevenue in descending order
trip_count_by_Company <- cleaned_taxi_df %>%
group_by(Company) %>%
summarise(TripCount = n_distinct(Trip.ID), .groups = 'drop') %>%
arrange(desc(TripCount))
# Display the full table sorted by Total Revenue
kable(trip_count_by_Company)
# Summarise Trip.Total by Company and arrange by TotalRevenue in descending order
trip_count_by_time <- cleaned_taxi_df %>%
group_by(Trip.Hour.Of.The.Day) %>%
summarise(TripCount = n_distinct(Trip.ID), .groups = 'drop') %>%
arrange(desc(TripCount))
ggplot(trip_count_by_time, aes(x = Trip.Hour.Of.The.Day, y = TripCount, fill = TripCount)) +
geom_col() +
labs(title = "Trips Count by time in a day",
x = "Time",
y = "Trip Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + # This line removes the legend
scale_fill_gradient(low = "lightblue", high = "blue") # This line adds a color gradient from light blue to blue
library(caret)
library(randomForest)
highlyCorrelated <- findCorrelation(cor_matrix, cutoff=0.6)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
head(cleaned_taxi_df[highlyCorrelated])
library(caret)
library(randomForest)
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff=0.6)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
head(cleaned_taxi_df[highlyCorrelated])
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff=0.6)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
head(cleaned_taxi_df[highlyCorrelated])
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff=0.75)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
head(cleaned_taxi_df[highlyCorrelated])
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff=0.2)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
head(cleaned_taxi_df[highlyCorrelated])
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
cleaned_taxi_df$Trip.Start.Timestamp <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff=0.2)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
head(cleaned_taxi_df[highlyCorrelated])
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
cleaned_taxi_df$Trip.Start.Timestamp <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff=0.1)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
head(cleaned_taxi_df[highlyCorrelated])
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
cleaned_taxi_df$Trip.Start.Timestamp <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff=0.1, names = TRUE)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
head(cleaned_taxi_df[highlyCorrelated])
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
cleaned_taxi_df$Trip.Start.Timestamp <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff=0.75, names = TRUE)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
head(cleaned_taxi_df[highlyCorrelated])
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
cleaned_taxi_df$Trip.Start.Timestamp <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff=0.5, names = TRUE)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
head(cleaned_taxi_df[highlyCorrelated])
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
cleaned_taxi_df$Trip.Start.Timestamp <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff = 0.5, names = TRUE)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
head(cleaned_taxi_df[highlyCorrelated])
print(cor_matrix)
temp_df <- cleaned_taxi_df[-highlyCorrelated]
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
cleaned_taxi_df$Trip.Start.Timestamp <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff = 0.5)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
print(cor_matrix)
temp_df <- cleaned_taxi_df[-highlyCorrelated]
numeric_columns <- sapply(temp_df, is.numeric)
cor_matrix <- cor(temp_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff = 0.5, names = TRUE)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
print(cor_matrix)
print(cleaned_taxi_df[highlyCorrelated])
temp_df <- cleaned_taxi_df[-highlyCorrelated]
print(cor_matrix)
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
cleaned_taxi_df$Trip.Start.Timestamp <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff = 0.5)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
print(cleaned_taxi_df[highlyCorrelated])
print(cor_matrix)
temp_df <- cleaned_taxi_df[-highlyCorrelated]
numeric_columns <- sapply(temp_df, is.numeric)
cor_matrix <- cor(temp_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff = 0.5, names = TRUE)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
print(cor_matrix)
temp_df <- cleaned_taxi_df[-highlyCorrelated]
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
cleaned_taxi_df$Trip.Start.Timestamp <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff = 0.5)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
print(cleaned_taxi_df[highlyCorrelated])
print(cor_matrix)
temp_df <- cleaned_taxi_df[-highlyCorrelated]
numeric_columns <- sapply(temp_df, is.numeric)
cor_matrix <- cor(temp_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff = 0.5, names = TRUE)
# data <- data[-highlyCorrelated]
print(temp_df[highlyCorrelated])
print(cor_matrix)
library(ggplot2)
library(dplyr)
library(tidyr)
library(knitr)
taxi_df <- read.csv("../taxi_Trips__2024.csv")
head(taxi_df)
colSums(is.na(taxi_df))
(unique(taxi_df$Company))
feature_desc <- read.csv("taxi_Trips_2024_Feature_descriptions.csv")
feature_desc
notes <- list()
for (feature in names(taxi_df)) {
curr_note <- paste("Valid rows:",(nrow(taxi_df) - sum(is.na(taxi_df[,feature]))),
"; N/A rows:", sum(is.na(taxi_df[,feature])),
"; Unique values:", length(unique(taxi_df[,feature])))
notes <- append(notes, curr_note)
}
notes
feature_desc$Notes <- unlist(notes)
feature_desc
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Pretty print the table with color
formattable(feature_desc, align = c("l", "l", "l", "l"), list(Notes = formatter("span", style = "color:blue"), Type = formatter("span", style = "color:green"))
)
length(which(taxi_df$Fare + taxi_df$Tips + taxi_df$Tolls + taxi_df$Extras != taxi_df$Trip.Total))
features_to_drop <- c("Trip.End.Timestamp", "Pickup.Census.Tract", "Dropoff.Census.Tract", "Pickup.Centroid.Latitude", "Pickup.Centroid.Longitude", "Pickup.Centroid.Location", "Dropoff.Centroid.Latitude", "Dropoff.Centroid.Longitude", "Dropoff.Centroid..Location")
simplified_taxi_df <- subset(taxi_df, select = -c(Trip.End.Timestamp, Pickup.Census.Tract, Dropoff.Census.Tract, Pickup.Centroid.Latitude, Pickup.Centroid.Longitude, Pickup.Centroid.Location, Dropoff.Centroid.Latitude, Dropoff.Centroid.Longitude, Dropoff.Centroid..Location))
head(simplified_taxi_df)
dim(simplified_taxi_df)
colSums(is.na(simplified_taxi_df))
cleaned_taxi_df <- simplified_taxi_df[!apply(is.na(simplified_taxi_df), 1, any), ]
colSums(is.na(cleaned_taxi_df))
dim(cleaned_taxi_df)
head(cleaned_taxi_df)
cleaned_taxi_df$Trip.Minutes <- round(cleaned_taxi_df$Trip.Seconds / 60, digits = 2)
cleaned_taxi_df$Trip.Seconds <- NULL
head(cleaned_taxi_df)
cleaned_taxi_df$Trip.Start.Timestamp <- as.POSIXct(cleaned_taxi_df$Trip.Start.Timestamp,
format = "%m/%d/%Y %I:%M:%S %p")
# ---------------------------------------------------------------------------------
# If you are facing any errors with the format used above, try using the one below
# ---------------------------------------------------------------------------------
# cleaned_taxi_df$Trip.Start.Timestamp <- as.POSIXct(cleaned_taxi_df$Trip.Start.Timestamp, format = "%m/%d/%y %H:%M")
cleaned_taxi_df$Trip.Start.Date <- as.Date(cleaned_taxi_df$Trip.Start.Timestamp)
cleaned_taxi_df$Trip.Hour.Of.The.Day <- as.integer(format(cleaned_taxi_df$Trip.Start.Timestamp, format = "%H"))
cleaned_taxi_df$Trip.Hour.Of.The.Day <- as.factor(cleaned_taxi_df$Trip.Hour.Of.The.Day)
days_of_week <- c("Sunday" = 1, "Monday" = 2, "Tuesday" = 3, "Wednesday" = 4, "Thursday" = 5, "Friday" = 6, "Saturday" = 7)
cleaned_taxi_df$Trip.Day.Of.The.Week <- as.integer(days_of_week[weekdays(cleaned_taxi_df$Trip.Start.Timestamp)])
cleaned_taxi_df$Trip.Day.Of.The.Week <- as.factor(cleaned_taxi_df$Trip.Day.Of.The.Week)
head(cleaned_taxi_df)
cleaned_taxi_df$Payment.Type <- as.factor(cleaned_taxi_df$Payment.Type)
cleaned_taxi_df$Company <- as.factor(cleaned_taxi_df$Company)
cleaned_taxi_df$Taxi.ID <- as.factor(cleaned_taxi_df$Taxi.ID)
head(cleaned_taxi_df)
cleaned_taxi_df$Pickup.Community.Area <- as.factor(cleaned_taxi_df$Pickup.Community.Area)
cleaned_taxi_df$Dropoff.Community.Area <- as.factor(cleaned_taxi_df$Dropoff.Community.Area)
dim(cleaned_taxi_df)
names(cleaned_taxi_df)
summary(cleaned_taxi_df)
head(cleaned_taxi_df)
attach(cleaned_taxi_df)
hist(Trip.Total, breaks = 50, main = "Histogram of Total fare", xlab = "Total Fare")
summary(Trip.Total)
fare_related_features <- cleaned_taxi_df[, c('Fare','Tips','Tolls','Extras','Trip.Total')]
boxplot(fare_related_features)
# Define the function to detect outliers for a single column
is.outlier <- function(x) {
iqr <- IQR(x, na.rm = TRUE)
lower <- quantile(x, 0.25, na.rm = TRUE) - 1.5 * iqr
upper <- quantile(x, 0.75, na.rm = TRUE) + 1.5 * iqr
return(x < lower | x > upper)
}
outliers <- is.outlier(Trip.Total)
sum(outliers)
cleaned_taxi_df <- cleaned_taxi_df[!outliers, ]
dim(cleaned_taxi_df)
hist(cleaned_taxi_df$Fare, breaks = 25, main = "Histogram of Fare", xlab = "Fare")
summary(cleaned_taxi_df$Fare)
hist(cleaned_taxi_df$Tips, breaks = 50, main = "Histogram of Tips", xlab = "Tips")
summary(cleaned_taxi_df$Tips)
hist(cleaned_taxi_df$Tolls, breaks = 50, main = "Histogram of Tolls", xlab = "Tolls")
summary(cleaned_taxi_df$Tolls)
hist(cleaned_taxi_df$Extras, breaks = 50, main = "Histogram of Extras", xlab = "Extras")
summary(cleaned_taxi_df$Extras)
hist(cleaned_taxi_df$Trip.Total, breaks = 25, main = "Histogram of Trip.Total", xlab = "Trip.Total")
summary(cleaned_taxi_df$Trip.Total)
boxplot(cleaned_taxi_df[, c('Fare','Tips','Tolls','Extras','Trip.Total')])
# Select only numeric columns for correlation
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
print(cor_matrix)
# Convert the correlation matrix to a long format for ggplot2
cor_data <- as.data.frame(as.table(cor_matrix))
# Create a heatmap with ggplot2
ggplot(cor_data, aes(Var1, Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Correlation Matrix Heatmap")
# Generate a sequence of dates within the range of your data
date_range <- seq(min(cleaned_taxi_df$Trip.Start.Date), max(cleaned_taxi_df$Trip.Start.Date), by = "day")
# Create a data frame of weekend dates
weekend_dates <- data.frame(Date = date_range[weekdays(date_range) %in% c("Saturday", "Sunday")])
# Group by Taxi ID and Date, then summarize the average trips
average_trips_per_taxi <- cleaned_taxi_df %>%
group_by(Taxi.ID, Trip.Start.Date) %>%
summarise(Trips = n(), .groups = 'drop') %>%
group_by(Trip.Start.Date) %>%
summarise(AvgTrips = mean(Trips), .groups = 'drop')
# Plot the average trips per taxi over time
plot <- ggplot(average_trips_per_taxi, aes(x = Trip.Start.Date, y = AvgTrips)) +
geom_line() +
labs(title = "Average Number of Trips per Taxi in a Day Over Time",
x = "Date",
y = "Average Trips per Taxi") +
theme_minimal()
# Add vertical lines for weekends
plot + geom_vline(data = weekend_dates, aes(xintercept = as.numeric(Date)), color = "red", linetype = "dashed")
# First, calculate the total trips per day
total_trips_over_time <- cleaned_taxi_df %>%
group_by(Trip.Start.Date) %>%
summarise(TotalTrips = n(), .groups = 'drop')
# Plot the total trips over time
total_trips_plot <- ggplot(total_trips_over_time, aes(x = Trip.Start.Date, y = TotalTrips)) +
geom_line() +
labs(title = "Total Trips Over Time",
x = "Date",
y = "Total Trips") +
theme_minimal()
# Add vertical lines for weekends
total_trips_plot + geom_vline(data = weekend_dates, aes(xintercept = as.numeric(Date)), color = "red", linetype = "dashed")
# Create a long format data frame for pickup and dropoff areas
area_data <- tidyr::pivot_longer(
cleaned_taxi_df,
cols = c("Pickup.Community.Area", "Dropoff.Community.Area"),
names_to = "AreaType",
values_to = "Area"
)
# Plot overlaid bar charts for pickup and dropoff area counts
ggplot(area_data, aes(x = as.factor(Area), fill = AreaType)) +
geom_bar(position = "identity", alpha = 0.5) +  # Set alpha for transparency
scale_fill_manual(values = c("Pickup.Community.Area" = "blue", "Dropoff.Community.Area" = "red")) +
labs(title = "Overlaid Bar Chart of Pickup and Dropoff Area Counts",
x = "Area Code",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Summarise Trip.Total by Payment Type
trip_total_by_PaymentType <- cleaned_taxi_df %>%
group_by(Payment.Type) %>%
summarise(TotalRevenue = sum(Trip.Total), .groups = 'drop')
# Create a bar plot of Trip Total by Payment Type
ggplot(trip_total_by_PaymentType, aes(x = Payment.Type, y = TotalRevenue, fill = Payment.Type)) +
geom_col() +  # This creates a bar chart with pre-summarized data
labs(title = "Trip Total by Payment Type",
x = "Payment Type",
y = "Total Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
trip_total_by_DayoftheWeek <- cleaned_taxi_df %>%
group_by(Trip.Day.Of.The.Week) %>%
summarise(TotalRevenue = sum(Trip.Total), .groups = 'drop')
# Define a named vector to map day numbers to day names
day_names <- c("1" = "Sunday", "2" = "Monday", "3" = "Tuesday", "4" = "Wednesday",
"5" = "Thursday", "6" = "Friday", "7" = "Saturday")
# Create the bar plot, using the named vector for axis labels
ggplot(trip_total_by_DayoftheWeek, aes(x = Trip.Day.Of.The.Week, y = TotalRevenue, fill = Trip.Day.Of.The.Week)) +
geom_col() +
scale_x_discrete(labels = day_names) +  # Use the day_names vector for axis labels
labs(title = "Trip Total by Day of the Week",
x = " ",
y = "Total Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarise Trip.Total by Company and arrange by TotalRevenue in descending order
trip_total_by_Company <- cleaned_taxi_df %>%
group_by(Company) %>%
summarise(TotalRevenue = sum(Trip.Total), .groups = 'drop') %>%
arrange(desc(TotalRevenue))
# Display the full table sorted by Total Revenue
kable(trip_total_by_Company)
# Summarise Trip.Total by Company and arrange by TotalRevenue in descending order
trip_total_by_time <- cleaned_taxi_df %>%
group_by(Trip.Hour.Of.The.Day) %>%
summarise(TotalRevenue = sum(Trip.Total), .groups = 'drop') %>%
arrange(desc(TotalRevenue))
ggplot(trip_total_by_time, aes(x = Trip.Hour.Of.The.Day, y = TotalRevenue, fill = TotalRevenue)) +
geom_col() +
labs(title = "Trips total by time in a day",
x = "Time",
y = "Trips total") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + # This line removes the legend
scale_fill_gradient(low = "lightblue", high = "blue") # This line adds a color gradient from light blue to blue
# Summarise Trip id by Payment Type
trip_count_by_PaymentType <- cleaned_taxi_df %>%
group_by(Payment.Type) %>%
summarise(TripCount = n_distinct(Trip.ID))
# Create a bar plot of Trip Total by Payment Type
ggplot(trip_count_by_PaymentType, aes(x = Payment.Type, y = TripCount, fill = Payment.Type)) +
geom_col() +  # This creates a bar chart with pre-summarized data
labs(title = "Trips Count by Paymeny type",
x = "Payment Type",
y = "Trip Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
trip_count_by_DayoftheWeek <- cleaned_taxi_df %>%
group_by(Trip.Day.Of.The.Week) %>%
summarise(TripCount = n_distinct(Trip.ID))
# Define a named vector to map day numbers to day names
day_names <- c("1" = "Sunday", "2" = "Monday", "3" = "Tuesday", "4" = "Wednesday",
"5" = "Thursday", "6" = "Friday", "7" = "Saturday")
# Create the bar plot, using the named vector for axis labels
ggplot(trip_count_by_DayoftheWeek, aes(x = Trip.Day.Of.The.Week, y = TripCount, fill = Trip.Day.Of.The.Week)) +
geom_col() +
scale_x_discrete(labels = day_names) +  # Use the day_names vector for axis labels
labs(title = "Trip Count by Day of the Week",
x = " ",
y = "Trip Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Summarise Trip.Total by Company and arrange by TotalRevenue in descending order
trip_count_by_Company <- cleaned_taxi_df %>%
group_by(Company) %>%
summarise(TripCount = n_distinct(Trip.ID), .groups = 'drop') %>%
arrange(desc(TripCount))
# Display the full table sorted by Total Revenue
kable(trip_count_by_Company)
# Summarise Trip.Total by Company and arrange by TotalRevenue in descending order
trip_count_by_time <- cleaned_taxi_df %>%
group_by(Trip.Hour.Of.The.Day) %>%
summarise(TripCount = n_distinct(Trip.ID), .groups = 'drop') %>%
arrange(desc(TripCount))
ggplot(trip_count_by_time, aes(x = Trip.Hour.Of.The.Day, y = TripCount, fill = TripCount)) +
geom_col() +
labs(title = "Trips Count by time in a day",
x = "Time",
y = "Trip Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + # This line removes the legend
scale_fill_gradient(low = "lightblue", high = "blue") # This line adds a color gradient from light blue to blue
library(caret)
library(randomForest)
cleaned_taxi_df$Trip.ID <- NULL
cleaned_taxi_df$Taxi.ID <- NULL
cleaned_taxi_df$Trip.Start.Timestamp <- NULL
numeric_columns <- sapply(cleaned_taxi_df, is.numeric)
cor_matrix <- cor(cleaned_taxi_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff = 0.5)
# data <- data[-highlyCorrelated]
print(highlyCorrelated)
print(cleaned_taxi_df[highlyCorrelated])
print(cor_matrix)
temp_df <- cleaned_taxi_df[-highlyCorrelated]
numeric_columns <- sapply(temp_df, is.numeric)
cor_matrix <- cor(temp_df[, numeric_columns], use = "complete.obs")
highlyCorrelated <- findCorrelation(cor_matrix, cutoff = 0.5, names = TRUE)
# data <- data[-highlyCorrelated]
print(temp_df[highlyCorrelated])
print(cor_matrix)
