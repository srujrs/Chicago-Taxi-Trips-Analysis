taxi <- read.csv("Taxi_Trips__2024.csv")
taxi <- read.csv("../Taxi_Trips__2024.csv")
taxi <- read.csv("../Taxi_Trips__2024.csv")
head(taxi)
print(names(taxi))
print(nrow(taxi))
colSums(is.na(taxi))
(unique(taxi$Company))
feature_desc <- read.csv("Taxi_Trips_2024_Feature_descriptions.csv")
feature_desc
notes <- list()
for (feature in names(taxi)) {
curr_note <- paste("Valid rows:",(nrow(taxi) - sum(is.na(taxi[,feature]))),
"; N/A rows:", sum(is.na(taxi[,feature])),
"; Unique values:", length(unique(taxi[,feature])))
notes <- append(notes, curr_note)
}
notes
feature_desc$Notes <- unlist(notes)
feature_desc
library(knitr)
kable(feature_desc)
library(knitr)
kable(feature_desc, format = "pipe")
library(knitr)
kable(feature_desc, format = "html")
library(knitr)
kable(feature_desc, format = "latex")
library(knitr)
kable(feature_desc, format = "jira")
library(knitr)
kable(feature_desc, format = "org")
library(knitr)
kable(feature_desc, format = "pipe")
print(feature_desc, pretty = TRUE)
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, list(
Age = colorize,
Occupation = colorize
))
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, list(Notes = formatter("span", style = "color:red")
))
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, list(Notes = formatter("span", style = "color:blue")
))
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, list(Notes = formatter("span", style = "color:blue"), align = "c"
))
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, list(Notes = formatter("span", style = "color:blue"), align = "l"
))
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, list(Notes = formatter("span", style = "color:blue"), align = c("l")
))
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, list(Notes = formatter("span", style = "color:blue"), align = c("l", "l", "l", "l")
))
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, list(Notes = formatter("span", style = "color:blue"), align = c("r", "r", "r", "r")
))
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, list(Notes = formatter("span", style = "color:blue")), align = c("r", "r", "r", "r")
))
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, list(Notes = formatter("span", style = "color:blue")), align = c("r", "r", "r", "r")
)
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, , align = c("r", "r", "r", "r"), list(Notes = formatter("span", style = "color:blue"))
)
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, align = c("r", "r", "r", "r"), list(Notes = formatter("span", style = "color:blue"))
)
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, align = c("l", "l", "l", "l"), list(Notes = formatter("span", style = "color:blue"))
)
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, align = c("l", "l", "l", "l"), list(Notes = formatter("span", style = "color:blue"), Type = formatter("span", style = "color:red"))
)
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Create a colorizer function
colorize <- color_tile("white", "orange")
# Pretty print the table with color
formattable(feature_desc, align = c("l", "l", "l", "l"), list(Notes = formatter("span", style = "color:blue"), Type = formatter("span", style = "color:green"))
)
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Pretty print the table with color
formattable(feature_desc, align = c("l", "l", "l", "l"), list(Notes = formatter("span", style = "color:blue"), Type = formatter("span", style = "color:green"))
)
taxi <- read.csv("../Taxi_Trips__2024.csv")
head(taxi)
print(names(taxi))
print(nrow(taxi))
colSums(is.na(taxi))
(unique(taxi$Company))
feature_desc <- read.csv("Taxi_Trips_2024_Feature_descriptions.csv")
feature_desc
notes <- list()
for (feature in names(taxi)) {
curr_note <- paste("Valid rows:",(nrow(taxi) - sum(is.na(taxi[,feature]))),
"; N/A rows:", sum(is.na(taxi[,feature])),
"; Unique values:", length(unique(taxi[,feature])))
notes <- append(notes, curr_note)
}
notes
feature_desc$Notes <- unlist(notes)
feature_desc
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Pretty print the table with color
formattable(feature_desc, align = c("l", "l", "l", "l"), list(Notes = formatter("span", style = "color:blue"), Type = formatter("span", style = "color:green"))
)
which(taxi, taxi$Fare + taxi$Tips + taxi$Tolls + taxi$Extras = taxi$Trip.Total)
which(taxi, taxi$Fare + taxi$Tips + taxi$Tolls + taxi$Extras == taxi$Trip.Total)
which(taxi$Fare + taxi$Tips + taxi$Tolls + taxi$Extras == taxi$Trip.Total)
which(taxi$Fare + taxi$Tolls + taxi$Extras == taxi$Trip.Total)
which(taxi$Fare + taxi$Tolls == taxi$Trip.Total)
which(taxi$Fare + taxi$Extras == taxi$Trip.Total)
which(taxi$Fare == taxi$Trip.Total)
which(taxi$Fare + taxi$Tolls + taxi$Extras != taxi$Trip.Total)
which(taxi$Fare + taxi$Extras != taxi$Trip.Total)
which(taxi$Fare + taxi$Tips + taxi$Tolls + taxi$Extras != taxi$Trip.Total)
which(taxi$Fare != taxi$Trip.Total)
length(which(taxi$Fare + taxi$Tips + taxi$Tolls + taxi$Extras != taxi$Trip.Total))
features_to_drop <- c("Trip End Timestamp", "Pickup Census Tract", "Dropoff Census Tract", "Pickup Centroid Latitude", "Pickup Centroid Longitude", "Pickup Centroid Location", "Dropoff Centroid Latitude", "Dropoff Centroid Longitude", "Dropoff Centroid Location")
simplified_taxi <- subset(taxi, select = -c())
features_to_drop <- c("Trip End Timestamp", "Pickup Census Tract", "Dropoff Census Tract", "Pickup Centroid Latitude", "Pickup Centroid Longitude", "Pickup Centroid Location", "Dropoff Centroid Latitude", "Dropoff Centroid Longitude", "Dropoff Centroid Location")
simplified_taxi <- subset(taxi, select = -c())
features_to_drop <- c("Trip End Timestamp", "Pickup Census Tract", "Dropoff Census Tract", "Pickup Centroid Latitude", "Pickup Centroid Longitude", "Pickup Centroid Location", "Dropoff Centroid Latitude", "Dropoff Centroid Longitude", "Dropoff Centroid Location")
simplified_taxi <- subset(taxi, select = -features_to_drop)
features_to_drop <- c("Trip End Timestamp", "Pickup Census Tract", "Dropoff Census Tract", "Pickup Centroid Latitude", "Pickup Centroid Longitude", "Pickup Centroid Location", "Dropoff Centroid Latitude", "Dropoff Centroid Longitude", "Dropoff Centroid Location")
simplified_taxi <- subset(taxi, select = - features_to_drop)
features_to_drop <- c("Trip End Timestamp", "Pickup Census Tract", "Dropoff Census Tract", "Pickup Centroid Latitude", "Pickup Centroid Longitude", "Pickup Centroid Location", "Dropoff Centroid Latitude", "Dropoff Centroid Longitude", "Dropoff Centroid Location")
simplified_taxi <- subset(taxi, select = .-features_to_drop)
features_to_drop <- c("Trip End Timestamp", "Pickup Census Tract", "Dropoff Census Tract", "Pickup Centroid Latitude", "Pickup Centroid Longitude", "Pickup Centroid Location", "Dropoff Centroid Latitude", "Dropoff Centroid Longitude", "Dropoff Centroid Location")
simplified_taxi <- subset(taxi, select = -features_to_drop)
features_to_drop <- c("Trip.End.Timestamp", "Pickup.Census.Tract", "Dropoff.Census.Tract", "Pickup.Centroid.Latitude", "Pickup.Centroid.Longitude", "Pickup.Centroid.Location", "Dropoff.Centroid.Latitude", "Dropoff.Centroid.Longitude", "Dropoff.Centroid.Location")
simplified_taxi <- subset(taxi, select = -features_to_drop)
features_to_drop <- c(Trip.End.Timestamp, Pickup.Census.Tract, Dropoff.Census.Tract, Pickup.Centroid.Latitude, Pickup.Centroid.Longitude, Pickup.Centroid.Location, Dropoff.Centroid.Latitude, Dropoff.Centroid.Longitude, Dropoff.Centroid.Location)
# features_to_drop <- c(Trip.End.Timestamp, Pickup.Census.Tract, Dropoff.Census.Tract, Pickup.Centroid.Latitude, Pickup.Centroid.Longitude, Pickup.Centroid.Location, Dropoff.Centroid.Latitude, Dropoff.Centroid.Longitude, Dropoff.Centroid.Location)
simplified_taxi <- subset(taxi, select = -c(Trip.End.Timestamp, Pickup.Census.Tract, Dropoff.Census.Tract, Pickup.Centroid.Latitude, Pickup.Centroid.Longitude, Pickup.Centroid.Location, Dropoff.Centroid.Latitude, Dropoff.Centroid.Longitude, Dropoff.Centroid.Location))
# features_to_drop <- c(Trip.End.Timestamp, Pickup.Census.Tract, Dropoff.Census.Tract, Pickup.Centroid.Latitude, Pickup.Centroid.Longitude, Pickup.Centroid.Location, Dropoff.Centroid.Latitude, Dropoff.Centroid.Longitude, Dropoff.Centroid.Location)
simplified_taxi <- subset(taxi, select = -c(Trip.End.Timestamp, Pickup.Census.Tract, Dropoff.Census.Tract, Pickup.Centroid.Latitude, Pickup.Centroid.Longitude, Pickup.Centroid.Location, Dropoff.Centroid.Latitude, Dropoff.Centroid.Longitude, Dropoff.Centroid..Location))
head(simplified_taxi)
colSums(is.na(taxi))
features_to_drop <- c("Trip.End.Timestamp", "Pickup.Census.Tract", "Dropoff.Census.Tract", "Pickup.Centroid.Latitude", "Pickup.Centroid.Longitude", "Pickup.Centroid.Location", "Dropoff.Centroid.Latitude", "Dropoff.Centroid.Longitude", "Dropoff.Centroid..Location")
simplified_taxi <- subset(taxi, select = -features_to_drop)
features_to_drop <- c("Trip.End.Timestamp", "Pickup.Census.Tract", "Dropoff.Census.Tract", "Pickup.Centroid.Latitude", "Pickup.Centroid.Longitude", "Pickup.Centroid.Location", "Dropoff.Centroid.Latitude", "Dropoff.Centroid.Longitude", "Dropoff.Centroid..Location")
simplified_taxi <- subset(taxi, select = -c(Trip.End.Timestamp, Pickup.Census.Tract, Dropoff.Census.Tract, Pickup.Centroid.Latitude, Pickup.Centroid.Longitude, Pickup.Centroid.Location, Dropoff.Centroid.Latitude, Dropoff.Centroid.Longitude, Dropoff.Centroid..Location))
head(simplified_taxi)
colSums(is.na(simplified_taxi))
taxi_df <- read.csv("../taxi_df_Trips__2024.csv")
taxi_df <- read.csv("../taxi_df_Trips__2024.csv")
cleaned_taxi_df <- df[!apply(is.nan(df), 1, any), ]
taxi_df <- read.csv("../taxi_df_Trips__2024.csv")
taxi_df <- read.csv("../taxi_df_Trips__2024.csv")
taxi_df <- read.csv("../taxi_df_Trips__2024.csv")
getwd()
taxi_df <- read.csv("../taxi_Trips__2024.csv")
head(taxi_df)
print(names(taxi_df))
print(nrow(taxi_df))
colSums(is.na(taxi_df))
(unique(taxi_df$Company))
feature_desc <- read.csv("taxi_df_Trips_2024_Feature_descriptions.csv")
taxi_df <- read.csv("../taxi_Trips__2024.csv")
head(taxi_df)
print(names(taxi_df))
print(nrow(taxi_df))
colSums(is.na(taxi_df))
(unique(taxi_df$Company))
feature_desc <- read.csv("taxi_Trips_2024_Feature_descriptions.csv")
feature_desc
notes <- list()
for (feature in names(taxi_df)) {
curr_note <- paste("Valid rows:",(nrow(taxi_df) - sum(is.na(taxi_df[,feature]))),
"; N/A rows:", sum(is.na(taxi_df[,feature])),
"; Unique values:", length(unique(taxi_df[,feature])))
notes <- append(notes, curr_note)
}
notes
feature_desc$Notes <- unlist(notes)
feature_desc
# Install the formattable package if not already installed
if (!require(formattable)) {
install.packages("formattable")
}
# Load the formattable package
library(formattable)
# Pretty print the table with color
formattable(feature_desc, align = c("l", "l", "l", "l"), list(Notes = formatter("span", style = "color:blue"), Type = formatter("span", style = "color:green"))
)
length(which(taxi_df$Fare + taxi_df$Tips + taxi_df$Tolls + taxi_df$Extras != taxi_df$Trip.Total))
features_to_drop <- c("Trip.End.Timestamp", "Pickup.Census.Tract", "Dropoff.Census.Tract", "Pickup.Centroid.Latitude", "Pickup.Centroid.Longitude", "Pickup.Centroid.Location", "Dropoff.Centroid.Latitude", "Dropoff.Centroid.Longitude", "Dropoff.Centroid..Location")
simplified_taxi_df <- subset(taxi_df, select = -c(Trip.End.Timestamp, Pickup.Census.Tract, Dropoff.Census.Tract, Pickup.Centroid.Latitude, Pickup.Centroid.Longitude, Pickup.Centroid.Location, Dropoff.Centroid.Latitude, Dropoff.Centroid.Longitude, Dropoff.Centroid..Location))
head(simplified_taxi_df)
colSums(is.na(simplified_taxi_df))
cleaned_taxi_df <- simplified_taxi_df[!apply(is.nan(simplified_taxi_df), 1, any), ]
cleaned_taxi_df <- simplified_taxi_df[!apply(is.na(simplified_taxi_df), 1, any), ]
colSums(is.na(cleaned_taxi_df))
cleaned_taxi_df$Trip.Minutes <- taxi$Trip.Seconds / 60
cleaned_taxi_df$Trip.Minutes <- cleaned_taxi_df$Trip.Seconds / 60
cleaned_taxi_df$Trip.Seconds <- NULL
head(cleaned_taxi_df)
cleaned_taxi_df <- simplified_taxi_df[!apply(is.na(simplified_taxi_df), 1, any), ]
colSums(is.na(cleaned_taxi_df))
cleaned_taxi_df$Trip.Minutes <- round(cleaned_taxi_df$Trip.Seconds / 60, digits = 2)
cleaned_taxi_df$Trip.Seconds <- NULL
head(cleaned_taxi_df)
cleaned_taxi_df$Trip.Start.Timestamp <- as.POSIXct(cleaned_taxi_df$Trip.Start.Timestamp, format = "%m/%d/%Y %I:%M:%S %p")
cleaned_taxi_df$Trip.Hour.Of.The.Day <- as.integer(format(cleaned_taxi_df$Trip.Start.Timestamp, format = "%H"))
days_of_week <- c("Sunday" = 1, "Monday" = 2, "Tuesday" = 3, "Wednesday" = 4, "Thursday" = 5, "Friday" = 6, "Saturday" = 7)
cleaned_taxi_df$Trip.Day.Of.The.Week <- as.integer(days_of_week[weekdays(cleaned_taxi_df$Trip.Start.Timestamp)])
head(cleaned_taxi_df)
